package dictionaryapp;

import java.util.Set;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;

public class DictionaryManagerGUI extends javax.swing.JFrame {

    public DictionaryManager manager;
    
    public DictionaryManagerGUI() {
        initComponents();
        manager = new DictionaryManager();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        outputTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        addMessageButton = new javax.swing.JButton();
        chooseCategory = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        messageArea = new java.awt.TextArea();
        trainButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        dictionaryContent = new java.awt.TextArea();
        printButton = new javax.swing.JButton();
        chooseCategoryFindFeature = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        featureField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        countFeature = new javax.swing.JTextField();
        findFeature = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        chooseCategoryCountMessage = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        countMessages = new javax.swing.JTextField();
        countMessage = new javax.swing.JToggleButton();
        tableScrollPane = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        testMessageTextArea = new java.awt.TextArea();
        countBayesProbabilityButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        textArea1 = new java.awt.TextArea();
        fisherButton = new javax.swing.JButton();
        neuralNetworkButton = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        runTableButton = new javax.swing.JMenu();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputTabbedPane.setBackground(new java.awt.Color(102, 255, 102));

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        addMessageButton.setText("Add message");
        addMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMessageButtonActionPerformed(evt);
            }
        });

        chooseCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "good", "bad", " " }));

        jLabel1.setText("Choose category");

        trainButton.setText("Create dictionary using collection of training spam/notspam messages");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addMessageButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(chooseCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(messageArea, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(trainButton)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(chooseCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(trainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(messageArea, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addMessageButton)
                .addGap(43, 43, 43))
        );

        outputTabbedPane.addTab("Manage", jPanel1);

        jPanel2.setBackground(new java.awt.Color(153, 255, 153));

        printButton.setText("Print dictionary");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        chooseCategoryFindFeature.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "good", "bad", " " }));

        jLabel2.setText("Choose category");

        jLabel3.setText("Insert feature");

        jLabel4.setText("Count  in dictionary");

        countFeature.setEnabled(false);

        findFeature.setText("Find");
        findFeature.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findFeatureActionPerformed(evt);
            }
        });

        jLabel5.setText("Choose category");

        chooseCategoryCountMessage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "good", "bad", " " }));

        jLabel6.setText("Count of messages");

        countMessages.setEnabled(false);

        countMessage.setText("Count");
        countMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countMessageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dictionaryContent, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(chooseCategoryFindFeature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(featureField)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(chooseCategoryCountMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(countMessages, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel2Layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(42, 42, 42)
                                            .addComponent(countFeature, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 75, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(findFeature, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(102, 102, 102))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(countMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(dictionaryContent, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(printButton))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseCategoryFindFeature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(featureField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(countFeature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(findFeature)
                        .addGap(60, 60, 60)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(chooseCategoryCountMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(countMessages, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countMessage)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        outputTabbedPane.addTab("Info", jPanel2);
        outputTabbedPane.addTab("Probability table", tableScrollPane);

        countBayesProbabilityButton.setText("Count");
        countBayesProbabilityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countBayesProbabilityButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(countBayesProbabilityButton)
                    .addComponent(testMessageTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(389, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(testMessageTextArea, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(countBayesProbabilityButton)
                .addContainerGap(124, Short.MAX_VALUE))
        );

        outputTabbedPane.addTab("Bayes classifier", jPanel3);

        fisherButton.setText("count");
        fisherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fisherButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(fisherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(377, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(fisherButton)
                .addContainerGap(137, Short.MAX_VALUE))
        );

        outputTabbedPane.addTab("Fisher classifier", jPanel4);

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Statistic");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout neuralNetworkButtonLayout = new javax.swing.GroupLayout(neuralNetworkButton);
        neuralNetworkButton.setLayout(neuralNetworkButtonLayout);
        neuralNetworkButtonLayout.setHorizontalGroup(
            neuralNetworkButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neuralNetworkButtonLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(117, 117, 117))
            .addGroup(neuralNetworkButtonLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(430, Short.MAX_VALUE))
        );
        neuralNetworkButtonLayout.setVerticalGroup(
            neuralNetworkButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(neuralNetworkButtonLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jButton1)
                .addGap(58, 58, 58)
                .addComponent(jButton2)
                .addContainerGap(246, Short.MAX_VALUE))
        );

        outputTabbedPane.addTab("tab6", neuralNetworkButton);

        runTableButton.setText("Run probability table");
        runTableButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                runTableButtonMouseClicked(evt);
            }
        });
        jMenuBar1.add(runTableButton);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(outputTabbedPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void runTableButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_runTableButtonMouseClicked
        BayesClassifier bayesClassifier = new BayesClassifier(manager);
        String category = "good";
        Set<String> allFeatures = bayesClassifier.manager.features.keySet();
        String[][] allRows = new String[allFeatures.size()][];
        for(int i=0;i<allFeatures.size();i++)
        {
            allRows[i] = new String[6];
        }
        int index = 0;
        for(String feature : allFeatures)
        {
            String P = String.format("%.3f", bayesClassifier.conditionalProbability(feature, category));
            String Pw = String.format("%.3f", bayesClassifier.weightedProbability(feature, category));
            String N = String.valueOf(bayesClassifier.manager.getFeatureValue(feature, category));
            int allNNumber = bayesClassifier.manager.getFeatureValue(feature, "good") + bayesClassifier.manager.getFeatureValue(feature, "bad");
            String allN = String.valueOf(allNNumber);
            String allNInCat = String.valueOf(bayesClassifier.manager.getCategoryCount(category));//String.valueOf(manager.getAllFeaturesCount(category));
            
            allRows[index][0] = feature;
            allRows[index][1] = P;
            allRows[index][2] = Pw;
            allRows[index][3] = N;
            allRows[index][4] = allN;
            allRows[index][5] = allNInCat;
            
            index++;
        }
        Object[] columnNames = new Object[]{"Слово","P(Слово/Категория)","Pw(Слово/Категория)","N(Слово&Категория)","N(Слово)","N(Категория)"};
        JTable table = new JTable(allRows,columnNames);  
        tableScrollPane.getViewport ().add (table);
    }//GEN-LAST:event_runTableButtonMouseClicked

    private void fisherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fisherButtonActionPerformed
        FisherClassifier fisherClassifier = new FisherClassifier(manager);
        String document = textArea1.getText();
        String result = fisherClassifier.classificationResult(document);
        System.out.println(result);
    }//GEN-LAST:event_fisherButtonActionPerformed

    private void countBayesProbabilityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countBayesProbabilityButtonActionPerformed
        BayesClassifier bayesClassifier = new BayesClassifier(manager);
        String document = testMessageTextArea.getText();
        bayesClassifier.naiveBayesClassifier(document);
    }//GEN-LAST:event_countBayesProbabilityButtonActionPerformed

    private void countMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countMessageActionPerformed
        BayesClassifier bayesClassifier = new BayesClassifier(manager);
        int index = chooseCategoryCountMessage.getSelectedIndex();
        String category = chooseCategoryCountMessage.getItemAt(index);
        int count = bayesClassifier.manager.getCategoryCount(category);
        countMessages.setText(String.valueOf(count));
    }//GEN-LAST:event_countMessageActionPerformed

    private void findFeatureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findFeatureActionPerformed
        String word = featureField.getText();
        int index = chooseCategoryFindFeature.getSelectedIndex();
        String category = chooseCategoryFindFeature.getItemAt(index);
        countFeature.setText(String.valueOf(manager.getFeatureValue(word,category)));
    }//GEN-LAST:event_findFeatureActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        String output = manager.print();
        dictionaryContent.setText(output);
    }//GEN-LAST:event_printButtonActionPerformed

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        String notSpam = manager.getFileContent("good.txt");
        //String notSpam = manager.getFileContent("notSpam.txt");
        String[] messages = Pattern.compile("[-]{10}").split(notSpam);
        for(int i=0;i<messages.length;i++)
        {
            manager.addMessage(messages[i], "good");
        }
        String spam = manager.getFileContent("bad.txt");
        //String spam = manager.getFileContent("spam.txt");
        messages = Pattern.compile("[-]{10}").split(spam);
        for(int i=0;i<messages.length;i++)
        {
            manager.addMessage(messages[i], "bad");
        }
        int countGoodMessages = manager.getCategoryCount("good");
        int countBadMessages = manager.getCategoryCount("bad");
        JOptionPane.showMessageDialog(this, "Added messages from training collection : " + countGoodMessages + " - count of not spam ; " + countBadMessages + " - count spam");
    }//GEN-LAST:event_trainButtonActionPerformed

    private void addMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMessageButtonActionPerformed
        String message = messageArea.getText();
        int index = chooseCategory.getSelectedIndex();
        manager.addMessage(message, chooseCategory.getItemAt(index));
        JOptionPane.showMessageDialog(this, "Added successfully");
    }//GEN-LAST:event_addMessageButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        NeuralNetwork nN = new NeuralNetwork(manager);
        
        String messageGood = "I know i am an outsider";
        String messageBad = "Absolutely legal way to earn fast and without efforts";
   
        String notSpam = manager.getFileContent("good.txt");
        String[] messagesGood = Pattern.compile("[-]{10}").split(notSpam);
        String spam = manager.getFileContent("bad.txt");
        String[] messagesBad = Pattern.compile("[-]{10}").split(spam);
        
        for(int i=0;i<nN.MAX_EPOCH;i++)
        {
             for(int j = 0;j<messagesGood.length;j++)
             {
                 nN.trainingSet(messagesGood[j]);
                 nN.backpropagation(messagesGood[j], 0);
             }
             
             for(int j = 0;j<messagesBad.length;j++)
             {
                 nN.trainingSet(messagesBad[j]);
                 nN.backpropagation(messagesBad[j], 1);
             }            
          
        }
        
        

        double resultGood = nN.trainingSet(messageGood);
        System.out.println(resultGood);
        
        double resultBad = nN.trainingSet(messageBad);
        System.out.println(resultBad);
        //double result = nN.trainingSet(message);
      //  nN.showWeights();
//        String notSpam = manager.getFileContent("good.txt");
//        String[] messagesGood = Pattern.compile("[-]{10}").split(notSpam);
//        String spam = manager.getFileContent("bad.txt");
//        String[] messagesBad = Pattern.compile("[-]{10}").split(spam);
//        int[] categories = new int[messagesGood.length + messagesBad.length];
//        String[] messages = new String[messagesGood.length + messagesBad.length];
//     
//        for(int i=0,j=0,k=0;i<messages.length;i++)
//        {
//            if(i%2==0)
//            {
//                categories[i] = 0;
//                messages[j] = messagesGood[j];
//                j++;
//            }
//            else
//            {
//                categories[i] = 1;
//                messages[k] = messagesBad[k];
//                k++;
//            }
//        }
//        //nN.showWeights();
//        nN.train(messagesGood, categories);
//        String[] a = new String[] {"hello how are"};
//        int[] b = new int[] {1};
//        nN.train(a,b);
      //   nN.showWeights();
//        double result = nN.trainingSet("wild nature", 0);
//        System.out.print(result + " результат работы");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        BayesClassifier bayesClassifier = new BayesClassifier(manager);
        FisherClassifier fisherClassifier = new FisherClassifier(manager);
        NeuralNetwork network = new NeuralNetwork(manager);
        
        String notSpamTest = manager.getFileContent("goodTest.txt");
        String[] goodMessages = Pattern.compile("[-]{10}").split(notSpamTest);
        //System.out.println(notSpamTest);
        
        
        String spamTest = manager.getFileContent("badTest.txt");
        String[] badMessages = Pattern.compile("[-]{10}").split(spamTest);
        //System.out.println(spamTest);
        
        //байес
        
        System.out.println("Bayes Classifier");
        System.out.println("GOOD:");
        for(int i=0;i<goodMessages.length;i++)
        {
           // System.out.println(goodMessages[i]);
            String s = bayesClassifier.naiveBayesClassifier(goodMessages[i]);
            System.out.println(s);
        }
        System.out.println();
        
        System.out.println("BAD:");
        for(int i=0;i<badMessages.length;i++)
        {
            System.out.println(badMessages[i]);
            String s = bayesClassifier.naiveBayesClassifier(badMessages[i]);
            System.out.println(s);
        }
        
        
        
        //фишер
        System.out.println("Fisher Classifier");
        System.out.println("GOOD:");
        for(int i=0;i<goodMessages.length;i++)
        {
            String s = fisherClassifier.classificationResult(goodMessages[i]);
            System.out.println(s);
        }
        System.out.println();
        
        System.out.println("BAD:");
        for(int i=0;i<badMessages.length;i++)
        {
            String s = fisherClassifier.classificationResult(badMessages[i]);
            System.out.println(s);
        }
        
        
        
        
        //нейросеть
        String notSpam = manager.getFileContent("good.txt");
        String[] messagesGood = Pattern.compile("[-]{10}").split(notSpam);
        String spam = manager.getFileContent("bad.txt");
        String[] messagesBad = Pattern.compile("[-]{10}").split(spam);
        
        for(int i=0;i<network.MAX_EPOCH;i++)
        {
             for(int j = 0;j<messagesGood.length;j++)
             {
                 network.trainingSet(messagesGood[j]);
                 network.backpropagation(messagesGood[j], 0);
             }
             
             for(int j = 0;j<messagesBad.length;j++)
             {
                 network.trainingSet(messagesBad[j]);
                 network.backpropagation(messagesBad[j], 1);
             }            
        }
        
        
        System.out.println("Нейросеть");
        System.out.println("GOOD:");
        for(int i=0;i<goodMessages.length;i++)
        {
            double s = network.trainingSet(goodMessages[i]);
            System.out.println(s);
        }
        System.out.println();
        
        System.out.println("BAD:");
        for(int i=0;i<badMessages.length;i++)
        {
            double s = network.trainingSet(badMessages[i]);
            System.out.println(s);
        }
        
        
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DictionaryManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DictionaryManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DictionaryManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DictionaryManagerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DictionaryManagerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMessageButton;
    private javax.swing.JComboBox<String> chooseCategory;
    private javax.swing.JComboBox<String> chooseCategoryCountMessage;
    private javax.swing.JComboBox<String> chooseCategoryFindFeature;
    private javax.swing.JButton countBayesProbabilityButton;
    private javax.swing.JTextField countFeature;
    private javax.swing.JToggleButton countMessage;
    private javax.swing.JTextField countMessages;
    private java.awt.TextArea dictionaryContent;
    private javax.swing.JTextField featureField;
    private javax.swing.JToggleButton findFeature;
    private javax.swing.JButton fisherButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private java.awt.TextArea messageArea;
    private javax.swing.JPanel neuralNetworkButton;
    private javax.swing.JTabbedPane outputTabbedPane;
    private javax.swing.JButton printButton;
    private javax.swing.JMenu runTableButton;
    private javax.swing.JScrollPane tableScrollPane;
    private java.awt.TextArea testMessageTextArea;
    private java.awt.TextArea textArea1;
    private javax.swing.JButton trainButton;
    // End of variables declaration//GEN-END:variables
}
